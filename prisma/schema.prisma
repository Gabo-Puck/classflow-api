// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  profilePic       String?
  name             String
  lastname         String
  role             String
  password         String
  emailVerified    Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  TermTemplate     TermTemplate[]
  classEnrollments ClassEnrollment[]
  classesCreated   Class[]
  GroupDetails     GroupDetails[]
  Deliverable      Deliverable[]
  Notice           Notice[]
  FormTemplate     FormTemplate[]
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String
  classId      Int
  class        Class          @relation(fields: [classId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  archived     Boolean        @default(false)
  GroupDetails GroupDetails[]
  Assignment   Assignment[]
}

model Class {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  deleted          Boolean           @default(false)
  archived         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  creatorId        Int
  deletedAt        DateTime?
  archivedAt       DateTime?
  code             String            @default("")
  terms            Term[]
  professor        User              @relation(fields: [creatorId], references: [id])
  enrolledStudents ClassEnrollment[]
  Group            Group[]
  Notice           Notice[]
  Assignment       Assignment[]
}

model GroupDetails {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())
  groupRole String
  status    String   @default("ACTIVE")

  @@id([groupId, userId])
}

model Assignment {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  categoryId     Int
  category       TermCategories   @relation(fields: [categoryId], references: [id])
  lateDelivery   Boolean          @default(false)
  latePenalty    Int              @default(0)
  dueAt          DateTime
  groupId        Int
  formId         Int?
  autoGrade      Boolean?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  form           Form?
  group          Group            @relation(fields: [groupId], references: [id])
  class          Class            @relation(fields: [classId], references: [id])
  Deliverable    Deliverable[]
  classId        Int
  AssignmentFile AssignmentFile[]
}

model Deliverable {
  id                Int                 @id @default(autoincrement())
  assignmentId      Int
  studentId         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  delivered         Boolean             @default(false)
  deliveredAt       DateTime?
  graded            Boolean             @default(false)
  finalGrade        Decimal             @default(0)
  assignment        Assignment          @relation(fields: [assignmentId], references: [id])
  student           User                @relation(fields: [studentId], references: [id])
  FileDeliverable   FileDeliverable[]
  NoteDeliverable   NoteDeliverable[]
  AnswerDeliverable AnswerDeliverable[]
}

model FileDeliverable {
  id            Int         @id @default(autoincrement())
  filename      String
  direction     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deliverableId Int
  deliverable   Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
}

model AssignmentFile {
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  file         File       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId       Int

  @@id([assignmentId, fileId])
}

model File {
  id             Int              @id @default(autoincrement())
  filename       String
  ext            String           @default("")
  path           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AssignmentFile AssignmentFile[]
}

model NoteDeliverable {
  id            Int         @id @default(autoincrement())
  noteId        Int
  note          Note        @relation(fields: [noteId], references: [id])
  deliverableId Int
  deliverable   Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
}

model Note {
  id              Int               @id @default(autoincrement())
  NoteDeliverable NoteDeliverable[]
}

model AnswerDeliverable {
  id            Int         @id @default(autoincrement())
  deliverableId Int
  deliverable   Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
  answers       String
}

model Form {
  id           Int        @id @default(autoincrement())
  name         String
  description  String     @default("")
  questions    String
  Assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  creatorId    Int
  assignmentId Int        @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model FormTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @default("")
  questions   String
  creatorId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Creator     User     @relation(fields: [creatorId], references: [id])
}

model ClassEnrollment {
  class      Class     @relation(fields: [classId], references: [id])
  classId    Int
  student    User      @relation(fields: [studentId], references: [id])
  studentId  Int
  enrolledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  status     Int

  @@id([studentId, classId])
}

model Notice {
  id        Int       @id @default(autoincrement())
  class     Class     @relation(fields: [classId], references: [id])
  classId   Int
  content   String    @default("")
  title     String    @default("")
  creator   User      @relation(fields: [creatorId], references: [id])
  creatorId Int
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Term {
  id             Int              @id @default(autoincrement())
  name           String
  value          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  termCategories TermCategories[]
  Class          Class?           @relation(fields: [classId], references: [id])
  classId        Int?
}

model TermCategories {
  id          Int          @id @default(autoincrement())
  name        String
  value       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  termId      Int
  termDetails Term         @relation(fields: [termId], references: [id], onDelete: Cascade)
  Assignment  Assignment[]
}

model TermTemplate {
  id          Int                   @id @default(autoincrement())
  name        String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  creatorId   Int
  creator     User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  termDetails TermTemplateDetails[]
}

model TermTemplateDetails {
  id                            Int                             @id @default(autoincrement())
  name                          String
  value                         Int
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  termTemplate                  TermTemplate                    @relation(fields: [termTemplateId], references: [id], onDelete: Cascade)
  termTemplateId                Int
  termTemplateDetailsCategories TermTemplateDetailsCategories[]
}

model TermTemplateDetailsCategories {
  id                    Int                 @id @default(autoincrement())
  name                  String
  value                 Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  termTemplateDetailsId Int
  termTemplateDetails   TermTemplateDetails @relation(fields: [termTemplateDetailsId], references: [id], onDelete: Cascade)
}
